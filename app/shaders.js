var SHADERS = (function(){

  var VSHADER_COMPUTE = [
    "precision highp float;",
    "",
    "attribute vec2 aPosition;",
    "varying vec2 vPosition;",
    "varying vec2 vRandomCoord;",
    "varying vec2 vRandomCoord2;",
    "uniform vec2 uSeed;",
    "uniform vec2 uSeed2;",
    "uniform float uSeedRatio;",
    "",
    "void main() {",
    "  vPosition = aPosition;",
    "  vRandomCoord = aPosition * uSeedRatio + uSeed;",
    "  vRandomCoord2 = aPosition * uSeedRatio + uSeed2;",
    "  gl_Position = vec4(",
    "    aPosition.x * 2.0 - 1.0,",
    "    aPosition.y * 2.0 - 1.0,",
    "    0.0, 1.0);",
    "}"
  ].join('\n');
  var FSHADER_GRASS_RENDER = [
    "precision mediump float;",
    "varying vec2 vPosition;",
    "uniform sampler2D uTexGrass;",
    "void main() {",
    "  vec4 c = texture2D(uTexGrass, vPosition);",
    "  if (c.a * 255.0 > 254.0) {",
    "    gl_FragColor = vec4(c.rgb * 0.9, 1.0);",
    "  } else {",
    "    gl_FragColor = vec4(1.0);",
    "  }",
    "}"
  ].join('\n');

  var FSHADER_HERBIVORE_RENDER = [
    "precision mediump float;",
    "varying vec2 vPosition;",
    "uniform sampler2D uTexGrass;",
    "void main() {",
    "  vec4 c = texture2D(uTexGrass, vPosition);",
    "  if (c.a > 0.0001) {",
    "    gl_FragColor = vec4(c.rgb * 0.9, 1.0);",
    "  } else {",
    "    gl_FragColor = vec4(0.0);",
    "  }",
    "}"
  ].join('\n');
  var FSHADER_WORLD_RENDER = [
    "precision mediump float;",
    "varying vec2 vPosition;",
    "uniform sampler2D uTexGrass;",
    "uniform sampler2D uTexTemp;",
    "uniform sampler2D uTexHerbivore;",
    "uniform int uRenderMode;",
    "const vec4 WHITE = vec4(1.0, 1.0, 1.0, 1.0);",
    "const vec4 BLACK = vec4(0.0, 0.0, 0.0, 1.0);",
    "const vec4 BROWN = vec4(0.3, 0.2, 0.1, 1.0);",
    "const vec4 TRANS = vec4(0.0, 0.0, 0.0, 0.0);",
    "void main() {",
    "  vec4 g = texture2D(uTexGrass, vPosition);",
    "  vec4 h = texture2D(uTexHerbivore, vPosition);",
    "  vec4 t = texture2D(uTexTemp, vPosition);",
    "  if (uRenderMode == 0) {",
    "    if (h.a > 0.0) {",
    "      gl_FragColor = WHITE;",
    "    } else if (g.a > 0.0) {",
    "      gl_FragColor = vec4(0.1 + g.rgb * 0.9, 1.0);",
    "    } else {",
    "      gl_FragColor = BLACK;",
    "    }",
    "  } else if (uRenderMode == 1) {",
    "    if (h.a > 0.0) {",
    "      gl_FragColor = vec4(h.rgb, 1.0);",
    "    } else {",
    "      gl_FragColor = BLACK;",
    "    }",
    "  } else if (uRenderMode == 2) {",
    "    if (h.a > 0.0) {",
    "      gl_FragColor = vec4(2.0 * (1.0 - h.a), 2.0 * h.a, 0.0, 1.0);",
    "    } else {",
    "      gl_FragColor = BLACK;",
    "    }",
    "  } else if (uRenderMode == 3) {",
    "    if (g.a > 0.0) {",
    "      gl_FragColor = vec4(g.rgb, 1.0);",
    "    } else {",
    "      gl_FragColor = BLACK;",
    "    }",
    "  } else if (uRenderMode == 4) {",
    "    gl_FragColor = vec4(t.r, t.g, t.a, 1.0);",
    "  } else {",
    "    gl_FragColor = BROWN;",
    "  }",
    "}"
  ].join('\n');

  var FSHADER_HERBIVORE_ITERATE = [
    "precision mediump float;",
    "",
    "varying vec2 vPosition;",
    "varying vec2 vRandomCoord;",
    "varying vec2 vRandomCoord2;",
    "uniform sampler2D uTexHerbivore;",
    "uniform sampler2D uTexGrass;",
    "uniform sampler2D uTexPermutation;",
    "uniform sampler2D uTexRandom;",
    "uniform vec2 uPixSize;",
    "uniform float uHerbivoreStepRate;",
    "uniform float uHerbivoreSpawnRate;",
    "uniform float uHerbivoreStartHealth;",
    "uniform float uHerbivoreIncHealth;",
    "uniform float uHerbivoreDecHealth;",
    "uniform float uHerbivoreDislikeRate;",
    "uniform vec3 uHerbivoreColorMutationRate;",
    "",
    "vec2 step;",
    "vec4 rnd, rnd2, loc_herbi, rem_herbi, loc_grass, perm;",
    "",
    "bool herbivore_lives(vec4 herbi) {",
    "  return herbi.a > 0.0001;",
    "}",
    "",
    "bool herbivore_spawns() {",
    "  return perm.z < 0.1 && perm.w < uHerbivoreSpawnRate - (0.5 / 255.0);",
    "}",
    "",
    "vec4 herbivore_spawn() {",
    "  vec3 col = loc_herbi.rgb + (rnd.rgb * 2.0 - 1.0) * uHerbivoreColorMutationRate;",
    "  return vec4(clamp(col, 0.0, 1.0), uHerbivoreStartHealth);",
    "}",
    "",
    "void main() {",
    "  rnd = texture2D(uTexRandom, vRandomCoord);",
    "  rnd2 = texture2D(uTexRandom, vRandomCoord2);",
    "  loc_herbi = texture2D(uTexHerbivore, vPosition);",
    "",
    "  loc_herbi.a = max(0.0, loc_herbi.a - uHerbivoreDecHealth);",
    "",
    "  perm = texture2D(uTexPermutation, vRandomCoord);",
    "  gl_FragColor = loc_herbi;",
    "  float disc = perm.x * 255.0;",
    "  bool spawns = herbivore_spawns();",
    "  if (disc < 254.5 && (perm.y < uHerbivoreStepRate || spawns)) {",
    "    if (disc < 3.5) {",
    "      if (disc < 1.5) {",
    "        if (disc < 0.5) {",
    "          step = vec2( 1.0, -1.0);",
    "        } else {",
    "          step = vec2( 1.0,  0.0);",
    "        }",
    "      } else {",
    "        if (disc < 2.5) {",
    "          step = vec2( 1.0,  1.0);",
    "        } else {",
    "          step = vec2( 0.0,  1.0);",
    "        }",
    "      }",
    "    } else {",
    "      if (disc < 5.5) {",
    "        if (disc < 4.5) {",
    "          step = vec2(-1.0,  1.0);",
    "        } else {",
    "          step = vec2(-1.0,  0.0);",
    "        }",
    "      } else {",
    "        if (disc < 6.5) {",
    "          step = vec2(-1.0, -1.0);",
    "        } else {",
    "          step = vec2( 0.0, -1.0);",
    "        }",
    "      }",
    "    }",
    "",
    "    rem_herbi = texture2D(uTexHerbivore, vPosition + step * uPixSize);",
    "    if (herbivore_lives(loc_herbi)) {",
    "      if (herbivore_lives(rem_herbi)) {",
    "      } else {",
    "        if (spawns) {",
    "          gl_FragColor = herbivore_spawn();",
    "        } else {",
    "          gl_FragColor = vec4(0.0);",
    "        }",
    "      }",
    "    } else {",
    "      if (herbivore_lives(rem_herbi)) {",
    "        gl_FragColor = rem_herbi;",
    "      }",
    "    }",
    "  }",
    "}"
  ].join('\n');
  var FSHADER_HERBIVORE_EAT = [
    "precision mediump float;",
    "",
    "varying vec2 vPosition;",
    "varying vec2 vRandomCoord;",
    "uniform sampler2D uTexHerbivore;",
    "uniform sampler2D uTexGrass;",
    "uniform sampler2D uTexRandom;",
    "uniform float uHerbivoreDislikeRate;",
    "",
    "void main() {",
    "  vec4 rnd = texture2D(uTexRandom, vRandomCoord);",
    "  vec4 herbi = texture2D(uTexHerbivore, vPosition);",
    "  vec4 grass = texture2D(uTexGrass, vPosition);",
    "  if (herbi.a > 0.0) {",
    "    float treshold = 1.0 - 16.0 * uHerbivoreDislikeRate * distance(herbi.rgb, grass.rgb);",
    "    if (grass.a > 0.0 && rnd.x < treshold) {",
    "      gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);",
    "    } else {",
    "      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);",
    "    }",
    "  } else {",
    "    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);",
    "  }",
    "}"
  ].join('\n');
  var FSHADER_HERBIVORE_APPLY_EAT = [
    "precision mediump float;",
    "",
    "varying vec2 vPosition;",
    "uniform sampler2D uTexHerbivore;",
    "uniform sampler2D uTexTemp;",
    "uniform float uHerbivoreIncHealth;",
    "",
    "void main() {",
    "  vec4 herbi = texture2D(uTexHerbivore, vPosition);",
    "  vec4 temp = texture2D(uTexTemp, vPosition);",
    "  herbi.a = clamp(herbi.a + temp.r * uHerbivoreIncHealth, 0.0, 1.0);",
    "  gl_FragColor = herbi;",
    "}"
  ].join('\n');
  var FSHADER_GRASS_APPLY_EAT = [
    "precision mediump float;",
    "",
    "varying vec2 vPosition;",
    "uniform sampler2D uTexGrass;",
    "uniform sampler2D uTexTemp;",
    "",
    "void main() {",
    "  vec4 grass = texture2D(uTexGrass, vPosition);",
    "  vec4 temp = texture2D(uTexTemp, vPosition);",
    "  gl_FragColor = temp.r > 0.0 ? vec4(0.0) : grass;",
    "}"
  ].join('\n');

  /*
  0     0.125  0.25   0.375  0.5    0.625  0.75   0.875   1
  |      |      |      |      |      |      |      |      |
   */
  var FSHADER_GRASS_GROW = [
    "precision mediump float;",
    "",
    "varying vec2 vPosition;",
    "varying vec2 vRandomCoord;",
    "varying vec2 vRandomCoord2;",
    "uniform vec3 uGrassMutationRate;",
    "uniform float uGrassGrowRate;",
    "uniform mediump vec2 uPixSize;",
    "uniform sampler2D uTexRandom;",
    "uniform sampler2D uTexGrass;",
    "uniform sampler2D uTexDeltas;",
    "",
    "const float DARK = 0.0;",
    "const float LIGH = 0.8;",
    "",
    "vec4 rnd, rnd2, grass, deltas;",
    "",
    "vec3 mutateColor(vec3 c) {",
    "  return clamp(c.rgb + (rnd.rgb * 2.0 - vec3(1.0)) * uGrassMutationRate, 0.0, 1.0);",
    "}",
    "",
    "void grow(vec2 delta) {",
    "  vec4 c = texture2D(uTexGrass, vPosition + ( delta * 255.0 - vec2(1.0)) * uPixSize);",
    "  if (c.a * 255.0 > 254.5) {",
    "    gl_FragColor = vec4(mutateColor(c.rgb), 1.0);",
    "  }",
    "}",
    "",
    "void main() {",
    "  grass = texture2D(uTexGrass, vPosition);",
    "  gl_FragColor = grass;",
    "  rnd = texture2D(uTexRandom, vRandomCoord);",
    "  rnd2 = texture2D(uTexRandom, vRandomCoord2);",
    "  if (grass.a * 255.0 < 254.5 && rnd2.a < uGrassGrowRate) {",
    "    float coordy = (0.5 + rnd2.r * 255.0) / 256.0;",
    "    deltas = texture2D(uTexDeltas, vec2( (0.5 + 0.0) / 4.0  , coordy ));",
    "    grow(deltas.xy); grow(deltas.zw);",
    "    deltas = texture2D(uTexDeltas, vec2( (0.5 + 1.0) / 4.0  , coordy ));",
    "    grow(deltas.xy); grow(deltas.zw);",
    "    deltas = texture2D(uTexDeltas, vec2( (0.5 + 2.0) / 4.0  , coordy ));",
    "    grow(deltas.xy); grow(deltas.zw);",
    "    deltas = texture2D(uTexDeltas, vec2( (0.5 + 3.0) / 4.0  , coordy ));",
    "    grow(deltas.xy); grow(deltas.zw);",
    "  }",
    "}"
  ].join('\n');


  return {
    VSHADER_COMPUTE: VSHADER_COMPUTE,
    FSHADER_GRASS_RENDER: FSHADER_GRASS_RENDER,
    FSHADER_HERBIVORE_RENDER: FSHADER_HERBIVORE_RENDER,
    FSHADER_WORLD_RENDER: FSHADER_WORLD_RENDER,
    FSHADER_HERBIVORE_ITERATE: FSHADER_HERBIVORE_ITERATE,
    FSHADER_GRASS_GROW: FSHADER_GRASS_GROW,
    FSHADER_HERBIVORE_EAT: FSHADER_HERBIVORE_EAT,
    FSHADER_HERBIVORE_APPLY_EAT: FSHADER_HERBIVORE_APPLY_EAT,
    FSHADER_GRASS_APPLY_EAT: FSHADER_GRASS_APPLY_EAT
  };
})();

